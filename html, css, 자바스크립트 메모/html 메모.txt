<!-- shift + alt + 위 화살표 코드 복사 -->
<!-- ctrl + shift + k : 한줄 삭제  -->
<!-- shift + alt + f : 코드 정렬 -->


html 주석이다
html은 화면 구성을 담당한다
태그 :: 화면 구성의 각각의 요소
속성 :: 각 태그에 대한 설정 (디자인 또는 크기)

!을 사용하면 이렇게 양식이 자동생성 된다.
<!DOCTYPE html>     <!-- "이 파일은 html 형식이다." 명시 -->
<html lang="en">    <!-- 화면 구성의 모든 것을 이 태그 안에 작성한다.-->
<head>      <!-- 화면 구성을 보조하는 역할한다.-->

</head> <!-- head 역할은 보조 역할을 함 -->
<body>  <!-- 화면 구성 결과가 나타나는 곳 -->


<h1>~<h6> :: 제목 태그 (숫자가 커질수록 글자가 작아짐)
p 태그 :: 본문 태그
br 태그 :: 줄바꿈(개행)태그 
span 태그 :: 특정 구간에 스타일 지정할 때 주로 사용
b태그는 요즘 자주 사용하지 않음. 스타일이 바뀌는지 확인하는 용도로 사용해봤음
img 태그 :: 이미지 불러오는 태그 (src 속성으로 사진 불러오기)

표를 만들 때에는 <table> 태그 사용
<table> 태그 생성과 동시에 생략되어서 나타난다. 실제로 사용할 필요는 없다.
<caption> :: 표를 설명할 때 사용하는 태그
colgroup 태그 :: 열을 그룹화하여 스타일 적용 할 때 사용 (col 태그와 함께)

<tr>, <th>, <td>를 사용하여, 행과 열을 구성
<tr> :: 행을 하나 씩 추가 할 때 사용
<th>, <td> :: 각각 테이블 헤더, 테이블의 실질적인 데이터를 의미
th는 표의 데이터 헤더이고 td와 달리 border 처리가 됨.
<tr>을 1개씩 추가할 때마다 행이 추가된다.
<thead>, <tbody>, <tfoot> :: 각각 헤더, 본문, 바닥글 의미한다.


목록 태그 :: <ul>, <ol>, <dl>
<ul> 태그 :: unordered list(정렬되지 않은 목록)
<li> 태그 :: 목록 요소를 추가할 때 사용
<ol> :: ordered list(정렬된 목록)
<dl> 태그 :: definition list(무언가를 설명하기 위한 목록)
<dt>, <dd> 태그 :: 각각 설명할 용어와 설명을 추가할 때 사용
<ul>, <dl> 중첩 가능


<audio> 태그 :: 음성 파일을 배치할 때 사용한다
video 태그 :: 비디오 또는 영상 삽입


공간 분할 태그
display 속성 :: block, inline, inline-block
block :: 한 줄 전체를 차지하고, 상하로는 필요한 공간만 차지하며 조절이 가능함
inline :: 상하좌우 모두 필요한 만큼만 공간 차지
inline-block :: 상하좌우 필요한 만큼만 공간 차지, 상하좌우 크기 조정이 됨 
div 태그 :: display 값 디폴트가 block 속성의 공간 분할 태그
span 태그 :: display 값 디폴트가 inline 속성의 공간 분할 태그


textarea 태그 :: 여러 줄 입력
cols :: 세로  rows :: 가로


주어진 입력값들 중 하나를 선택해서 입력
select 태그 :: 선택 양식 선언
option 태그 :: 선택 요소 추가
optgroup 태그 :: 옵션 그룹화


margin : 도형 밖 범위 
padding : 도형 안 범위


<form> 태그 :: 입력의 양식을 정의 (회원가입 시 이름,번호,주소 등은 form 태그 안에 삽입 되어있음)
여기 안에 여러가지 입력칸들을 넣음
input 태그 :: type 속성값에 따라, 입력 형태들이 달라짐
type 디폴트값은 text 


선택자 :: 상태, 링크, 부정, 구조, 문자
상태선택자 :: focus, enabled, disabled, checked
enabled 적용한 뒤에 :focus 적용해야 스타일 적용 잘 됨


구조 선택자 -> first-child, last-child, first-of-type, last-of-type 
                공통점 :: 형제 관계 (종속 관계X) 상태에서 적용

nth-child(숫자), nth-of-type(숫자)

h2:first-child :: h2 태그가 가장 먼저 나타났다면, 아래 스타일 적용하라.
h2:last-child :: h2 태그가 가장 나중에 나타났다면, 아래 스타일 적용하라.
p:first-of-type :: 가장 먼저 나타난 p에 대해, 아래 스타일 적용하라.


전체 선택자 :: html 페이지 안에 있는 모든 태그들을 선택 
ctrl + shfit ::전체 주석

후손 선택자 :: 특정 태그 안에 있는 후손을 선택한다.
[선택자1] [선택자2] {선언문들}      (공백을 이용하여 후손을 선택)

자손 선택자 :: 특정 태그 "바로 안에 있는" 자손 (직속 후손)을 선택
 [선택자1]>[선택자2] {선언문들}   (> 기호 사용)

-- tbody 태그는 생략가능 -> table 태그의 직속 후손은 tbody밖에 없음
(그래서 만약 쓸 것 이라면 반드시 tbody를 명시해줘야 함)

<div id="header">
        <h3>헤더 안의 h3</h3> <!-- #header div의 후손 -->

<div>
 <p>헤더안의 p</p> <!-- #header div의 후손은 맞지만, 자손은 아닌 상태 -->

 <div id="para">
        <h3>본문 안의 h3</h3> <!-- # para div의 후손 -->


동위 연산자 :: +, ~ (형제 개념이라고 생각하면 됨)
[선택자1] + [선택자2] :: [선택자1] 바로 뒤에 위치하는 
[선택자2] 선택(시스템 상 반드시 하나만 선택될 수 밖에 없음) 
[선택자1] ~ [선택자2] :: [선택자1] 뒤에 위치하는 [선택자2] 선택 (복수로 선택이 될 수 있음)


부정 선택자 -> not(부정하고자 하는 선택자)
링크 선택자 -> :link, :visited

문자 선택자 -> ::first-letter, ::first-line, ::selection
이렇게 중첩 사용도 가능함

태그 선택자 :: html에 포함되어 있는 특정 태그들을 선택
아이디 선택자 :: 특정 아이디 값을 갖고 있는 태그 선택
"#" 기호를 사용해서 선택
아래 구문 같은 경우엔, id값이 반드시 first_h1이어야만 적용 (first_h1_auto여도 적용x)


클래스 선택자 :: 각 태그들의 class값들 중 특정 값이 있는 태그 선택 
"." 기호를 사용해서 선택
class값 중 지정된 값이 포함되어 있기만 한다면 적용된다.

<header>, <nav>, <aside>, <section>, <article>, <footer> 네이버 등 보기

float 속성 :: right, left값 가질 수 있음 (이걸 통해서 한 줄에 나란히 공간 차지하게끔 함)

"특정 조건식을 만족한다면, 아래처럼 반응하라. 라는 의미다"
        @media screen and (조건식) {
            선택자 {스타일 적용문}


부트스트랩 
반드시 link와 script가 있는 코드를 사용해야 함
div 태그는 display 디폴트값이 block이다 즉, 한 줄을 전체 차지하고 있다.
keyframes :: 애니메이션 생성 (0%~100% 사이의 동작 정의)

height 크기가 높은 순으로 먼저 작성한다. 
그렇지 않으면 높은 사이즈로 설정한 색상이 나타나지 않음



